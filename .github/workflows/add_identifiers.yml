name: 2. Add Identifiers
run-name: Add Identifiers (${{ github.ref_name }})
on:
  workflow_dispatch:

jobs:
  validate:
    name: Validate
    uses: ./.github/workflows/validate_secrets.yml
    secrets: inherit
  
  identifiers:
    name: Add Identifiers
    needs: validate
    runs-on: macos-15
    steps:
      # Checks-out the repo
      - name: Checkout Repo
        uses: actions/checkout@v4
      
      # Patch Fastlane Match to not print tables
      - name: Patch Match Tables
        run: |
          TABLE_PRINTER_PATH=$(ruby -e 'puts Gem::Specification.find_by_name("fastlane").gem_dir')/match/lib/match/table_printer.rb
          if [ -f "$TABLE_PRINTER_PATH" ]; then
            sed -i "" "/puts(Terminal::Table.new(params))/d" "$TABLE_PRINTER_PATH"
          else
            echo "table_printer.rb not found"
            exit 1
          fi

      # Install project dependencies
      - name: Install Project Dependencies
        run: bundle install

      # Sync the GitHub runner clock with the Windows time server (workaround as suggested in https://github.com/actions/runner/issues/2996)
      - name: Sync clock
        run: sudo sntp -sS time.windows.com

      - name: Pre-install Apple WWDR Certificate
        run: |
          # Download and install Apple WWDR Certificate to prevent fastlane download issues
          echo "Pre-installing Apple WWDR Certificate..."
          WWDR_URL="https://www.apple.com/certificateauthority/AppleWWDRCAG6.cer"
          WWDR_CERT="/tmp/AppleWWDRCAG6.cer"
          
          # Try multiple methods to download the certificate
          if curl -f -o "$WWDR_CERT" --retry 3 --retry-delay 5 --connect-timeout 30 "$WWDR_URL"; then
            echo "Successfully downloaded WWDR certificate via curl"
          elif wget -O "$WWDR_CERT" --tries=3 --timeout=30 "$WWDR_URL"; then
            echo "Successfully downloaded WWDR certificate via wget"
          else
            echo "Failed to download WWDR certificate from primary URL"
            # Try alternative URL
            WWDR_ALT_URL="https://developer.apple.com/certificationauthority/AppleWWDRCAG6.cer"
            if curl -f -o "$WWDR_CERT" --retry 2 --retry-delay 3 --connect-timeout 20 "$WWDR_ALT_URL"; then
              echo "Successfully downloaded WWDR certificate from alternative URL"
            else
              echo "Failed to download WWDR certificate from all sources"
              echo "Setting environment variable to skip WWDR checks"
              echo "FASTLANE_SKIP_WWDR_CHECK=true" >> $GITHUB_ENV
              exit 0
            fi
          fi
          
          # Install the certificate if we successfully downloaded it
          if [ -f "$WWDR_CERT" ]; then
            echo "Installing WWDR certificate to system keychain..."
            # Try installing to both login keychain and temporary keychain
            security import "$WWDR_CERT" -k ~/Library/Keychains/login.keychain-db -T /usr/bin/codesign || echo "Login keychain import failed"
            
            # Create temporary keychain for fastlane if it doesn't exist
            TEMP_KEYCHAIN="fastlane_tmp_keychain-db"
            if ! security list-keychains | grep -q "$TEMP_KEYCHAIN"; then
              security create-keychain -p "" "$TEMP_KEYCHAIN" || echo "Temporary keychain creation failed"
              security set-keychain-settings -t 3600 -l "$TEMP_KEYCHAIN" || echo "Keychain settings failed"
              security list-keychains -s ~/Library/Keychains/login.keychain-db ~/Library/Keychains/"$TEMP_KEYCHAIN" || echo "Keychain list update failed"
            fi
            
            # Import to temporary keychain
            security import "$WWDR_CERT" -k ~/Library/Keychains/"$TEMP_KEYCHAIN" -T /usr/bin/codesign || echo "Temporary keychain import failed"
            
            echo "WWDR certificate installation completed"
            echo "FASTLANE_WWDR_AVAILABLE=true" >> $GITHUB_ENV
          else
            echo "WWDR certificate file not found after download attempts"
            echo "FASTLANE_SKIP_WWDR_CHECK=true" >> $GITHUB_ENV
          fi
      
      # Create or update identifiers for app
      - name: Fastlane Provision
        run: bundle exec fastlane identifiers
        env:
          TEAMID: ${{ secrets.TEAMID }}
          GH_PAT: ${{ secrets.GH_PAT }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          FASTLANE_KEY_ID: ${{ secrets.FASTLANE_KEY_ID }}
          FASTLANE_ISSUER_ID: ${{ secrets.FASTLANE_ISSUER_ID }}
          FASTLANE_KEY: ${{ secrets.FASTLANE_KEY }}
